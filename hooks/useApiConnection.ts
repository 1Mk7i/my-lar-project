import { useState, useCallback } from 'react'
import axios from 'axios'

// –¢–∏–º—á–∞—Å–æ–≤–æ —Å—Ç–≤–æ—Ä–∏–º–æ –ø—Ä–æ—Å—Ç–∏–π systemService –ø—Ä—è–º–æ —Ç—É—Ç
const tempSystemService = {
  async testConnection() {
    console.log('üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...')
    try {
      const response = await axios.get('http://localhost:8000/api/test')
      console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ:', response.data)
      return response.data
    } catch (error) {
      console.error('‚ùå –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–≤—Å—è:', error)
      throw error
    }
  }
}

type ConnectionStatus = 'idle' | 'testing' | 'connected' | 'failed'

export function useApiConnection() {
  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>('idle')
  const [connectionError, setConnectionError] = useState<string | null>(null)

  const testConnection = useCallback(async () => {
    try {
      setConnectionStatus('testing')
      setConnectionError(null)
      
      console.log('üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API...')
      
      const response = await tempSystemService.testConnection()
      console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ:', response)
      
      setConnectionStatus('connected')
      return true
    } catch (error: any) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error)
      
      setConnectionStatus('failed')
      setConnectionError(
        error.response?.data?.message || 
        '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π –±–µ–∫–µ–Ω–¥.'
      )
      return false
    }
  }, [])

  const resetConnection = useCallback(() => {
    setConnectionStatus('idle')
    setConnectionError(null)
  }, [])

  return {
    connectionStatus,
    connectionError,
    testConnection,
    resetConnection,
  }
}
