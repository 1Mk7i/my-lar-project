// components/Auth/LoginForm.tsx
'use client'

import { useState } from 'react'
import { apiClient } from '@/lib/api-client'

interface LoginFormProps {
  onSuccess?: () => void
  onClose?: () => void
}

export function LoginForm({ onSuccess, onClose }: LoginFormProps) {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!email || !password) {
      setError('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è')
      return
    }

    setLoading(true)
    setError('')

    try {
      console.log('üîê –°–ø—Ä–æ–±–∞ –≤—Ö–æ–¥—É...')
      
      const response = await apiClient.login({ email, password })
      
      console.log('‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥:', response)
      
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback —É—Å–ø—ñ—Ö—É
      if (onSuccess) {
        onSuccess()
      }
      
      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ, —è–∫—â–æ —î
      if (onClose) {
        onClose()
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ
      setTimeout(() => {
        window.location.reload()
      }, 1000)
      
    } catch (err: any) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:', err)
      
      let errorMessage = '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó'
      
      if (err.response?.data?.message) {
        errorMessage = err.response.data.message
      } else if (err.response?.data?.error) {
        errorMessage = err.response.data.error
      } else if (err.message) {
        errorMessage = err.message
      }
      
      setError(errorMessage)
    } finally {
      setLoading(false)
    }
  }

  const handleTestConnection = async () => {
    try {
      console.log('üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...')
      const response = await apiClient.testConnection()
      console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ:', response)
      alert('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API —É—Å–ø—ñ—à–Ω–µ!')
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error)
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API')
    }
  }

  return (
    <div className="w-full max-w-md mx-auto">
      <form onSubmit={handleLogin} className="space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900">–í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
          <p className="mt-2 text-sm text-gray-600">
            –£–≤—ñ–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å
          </p>
        </div>

        {/* –ü–æ–º–∏–ª–∫–∞ */}
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
            <div className="flex items-center">
              <span className="text-red-500 text-lg mr-2">‚ö†Ô∏è</span>
              <span className="font-medium">{error}</span>
            </div>
          </div>
        )}

        {/* –ü–æ–ª–µ email */}
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
            Email –∞–¥—Ä–µ—Å–∞
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
            placeholder="your@email.com"
            required
            disabled={loading}
          />
        </div>

        {/* –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è */}
        <div>
          <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
            –ü–∞—Ä–æ–ª—å
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
            placeholder="–í–∞—à –ø–∞—Ä–æ–ª—å"
            required
            disabled={loading}
          />
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥—É */}
        <button
          type="submit"
          disabled={loading}
          className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium"
        >
          {loading ? (
            <div className="flex items-center justify-center">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
              –í—Ö—ñ–¥...
            </div>
          ) : (
            '–£–≤—ñ–π—Ç–∏'
          )}
        </button>

        {/* –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó */}
        <div className="flex justify-between items-center pt-4 border-t border-gray-200">
          <button
            type="button"
            onClick={handleTestConnection}
            className="text-sm text-gray-600 hover:text-gray-800 transition-colors"
          >
            üîß –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
          </button>
          
          <button
            type="button"
            onClick={onClose}
            className="text-sm text-gray-600 hover:text-gray-800 transition-colors"
          >
            –°–∫–∞—Å—É–≤–∞—Ç–∏
          </button>
        </div>

        {/* –î–µ–º–æ –¥–∞–Ω—ñ */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <h3 className="text-sm font-medium text-gray-700 mb-2">–î–µ–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É:</h3>
          <div className="text-xs text-gray-600 space-y-1">
            <p>Email: admin@example.com</p>
            <p>Password: password</p>
          </div>
        </div>
      </form>
    </div>
  )
}