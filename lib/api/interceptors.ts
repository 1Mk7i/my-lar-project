// lib/api/interceptors.ts
import { AxiosInstance, InternalAxiosRequestConfig, AxiosResponse } from 'axios'

export function setupRequestInterceptor(client: AxiosInstance) {
  client.interceptors.request.use(
    (config: InternalAxiosRequestConfig) => {
      console.log(`üöÄ ${config.method?.toUpperCase()} ${config.url}`, config.params || '')
      return config
    },
    (error) => {
      console.error('‚ùå Request error:', error)
      return Promise.reject(error)
    }
  )
}

export function setupResponseInterceptor(client: AxiosInstance) {
  client.interceptors.response.use(
    (response: AxiosResponse) => {
      console.log(`‚úÖ ${response.status} ${response.config.url}`)
      return response
    },
    (error) => {
      handleApiError(error)
      return Promise.reject(error)
    }
  )
}

function handleApiError(error: any) {
  console.error(`‚ùå API Error ${error.response?.status} ${error.config?.url}:`, {
    status: error.response?.status,
    statusText: error.response?.statusText,
    data: error.response?.data,
    headers: error.response?.headers,
    config: {
      url: error.config?.url,
      method: error.config?.method,
      baseURL: error.config?.baseURL,
    },
  })

  // –î–µ—Ç–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏
  switch (error.response?.status) {
    case 500:
      console.error('üî• –°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞ 500. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:')
      console.error('1. –ß–∏ –∑–∞–ø—É—â–µ–Ω–∏–π Laravel —Å–µ—Ä–≤–µ—Ä?')
      console.error('2. –ß–∏ —î –ø–æ–º–∏–ª–∫–∏ –≤ storage/logs/laravel.log?')
      console.error('3. –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö?')
      break
    case 404:
      console.error('üîç –†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (404)')
      break
    case 401:
      console.error('üîê –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ (401)')
      break
    case 403:
      console.error('üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ (403)')
      break
  }
}

